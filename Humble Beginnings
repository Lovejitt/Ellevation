provider "aws" {
  region = "us-east-1" # Adjust the region as per your preference.
}

# Reference an existing VPC by its tag.
data "aws_vpc" "existing_vpc" {
  filter {
    name   = "tag:Name"
    values = ["My_VPC"] # Replace with your VPC tag name.
  }
}

# Reference an existing subnet within the VPC by its tag.
data "aws_subnet" "existing_subnet" {
  filter {
    name   = "tag:Name"
    values = ["My_Subnet"] # Replace with your subnet tag name.
  }
}

# Define the security group for our application server.
resource "aws_security_group" "app_server_sg" {
  name        = "app-server-sg"
  description = "Security Group for app server"

  # Allow ingress on port 80 for the application's health check HTTP endpoint.
  ingress {
    from_port   = 80  
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Adjust this to only allow traffic from necessary sources.
  }
}

# Defining our application server instance.
resource "aws_instance" "app_server" {
  ami           = "ami-0b9ce70cf1bc24fc3" # Amazon (change if needed)
  instance_type = "m5.xlarge"            # This provides 4 CPU cores and 16GB RAM.

  key_name               = "your-keypair-name" # Key-pair for SSH access.
  vpc_security_group_ids = [aws_security_group.app_server_sg.id] # Attach our security group.
  subnet_id              = data.aws_subnet.default.id

  # Use user_data for automated application setup.
  user_data              = <<-EOT
                            #!/bin/bash
                            # Replace with commands to:
                            # - Fetch the app from the artifact repository or local workstation.
                            # - Install the app.
                            # - Start the app.
                            EOT
  ebs_block_device {
    device_name = "/dev/sda1"
    volume_size = 200
  }
  
  tags = {
    Name = "AppServer"
  }

  # Ensure instance monitoring is enabled to facilitate self-recovery.
  monitoring = true

  # Ensures that during updates, a new instance is created before the old one is destroyed.
  lifecycle {
    create_before_destroy = true
  }
}

# Create a CloudWatch Alarm to monitor our application server's health.
resource "aws_cloudwatch_metric_alarm" "app_server_health" {
  alarm_name          = "AppServerHealthCheck"
  comparison_operator = "LessThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "StatusCheckFailed"
  namespace           = "AWS/EC2"
  period              = "60"
  statistic           = "SampleCount"
  threshold           = "1"
  alarm_description   = "This metric checks instance health via StatusCheckFailed metric."
  alarm_actions       = [aws_autoscaling_policy.restart_app.arn] # Trigger policy on alarm.
  dimensions = {
    InstanceId = aws_instance.app_server.id
  }
}

# Define a policy to restart our app if the health check fails.
resource "aws_autoscaling_policy" "restart_app" {
  name                   = "RestartAppPolicy"
  autoscaling_group_name = aws_instance.app_server.id # Assumes instance is part of an ASG.
  adjustment_type        = "ExactCapacity"
  scaling_adjustment     = 1
}
