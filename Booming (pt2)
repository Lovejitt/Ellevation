
provider "aws" {
  region = "us-east-1" 
}

# EC2 Auto Scaling for Application Resilience
resource "aws_launch_configuration" "app_launch_configuration" {
  image_id      = "ami-0b9ce70cf1bc24fc3" # Amazon (change if needed)
  instance_type = "t3.small" # 2 CPU Core 2 GiB of memory

  root_block_device {
    volume_size = 25  # Size of the root volume in GB
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "app_asg" {
  launch_configuration = aws_launch_configuration.app_launch_configuration.name
  min_size             = 3
  max_size             = 10
  desired_capacity     = 5
  availability_zones   = ["us-east-1a", "us-east-1b"] 
}

# Application Load Balancer Setup
resource "aws_lb" "app_lb" {
  name               = "app-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = ["sg-123456789abcdef0"] 
  subnets            = ["subnet-123456789abcdef0", "subnet-1234567890abcdef0"] 
}

resource "aws_lb_target_group" "app_lb_target_group" {
  name     = "app-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = "vpc-123456789abcdef0" 
}

resource "aws_lb_listener" "app_lb_listener" {
  load_balancer_arn = aws_lb.app_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.app_lb_target_group.arn
  }
}

# RDS Setup for Persistent Data Storage
resource "aws_db_instance" "app_db" {
  allocated_storage      = 20  # Storage size in GB
  storage_type           = "gp2" 
  engine                 = "mysql"  
  engine_version         = "8.0" 
  instance_class         = "db.t3.small"
  name                   = "mydatabase"
  username               = aws_secretsmanager_secret_version.db_secret_version.secret_string["username"]  
  password               = aws_secretsmanager_secret_version.db_secret_version.secret_string["password"]  
  parameter_group_name   = "default.mysql8.0"  
  skip_final_snapshot    = true 
}

# S3 Bucket for Data Sources
resource "aws_s3_bucket" "data_bucket" {
  bucket = "app-data-bucket"
  acl    = "private"
}

# AWS Lambda for Processing Data from the Database to S3
resource "aws_lambda_function" "process_data_lambda" {
  function_name = "processDataFunction"
  role          = aws_iam_role.lambda_exec_role.arn
  handler       = "index.handler"  
  runtime       = "nodejs14.x"
  source_code_hash = filebase64sha256("path_to_your_lambda")  
  filename      = "path_to_your_lambda" 
  
  environment {
    variables = {
      DB_HOST     = aws_db_instance.app_db.address,
      DB_USER     = aws_secretsmanager_secret_version.db_secret_version.secret_string["username"],
      DB_PASS     = aws_secretsmanager_secret_version.db_secret_version.secret_string["password"],
      S3_BUCKET   = aws_s3_bucket.data_bucket.bucket
    }
  }
}

resource "aws_iam_role" "lambda_exec_role" {
  name = "lambda_exec_role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_s3_full_access" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

resource "aws_iam_role_policy_attachment" "lambda_rds_full_access" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
}

# Secrets Manager for Storing Database Credentials Securely
resource "aws_secretsmanager_secret" "db_secret" {
  name = "db_secret"
}

resource "aws_secretsmanager_secret_version" "db_secret_version" {
  secret_id     = aws_secretsmanager_secret.db_secret.id
  secret_string = "{\"username\":\"appuser\",\"password\":\"yourpassword\"}"
}

# EventBridge Setup for Handling Data Source Triggers
resource "aws_cloudwatch_event_rule" "data_source_event" {
  event_pattern = jsonencode({
    source      = ["aws.s3"],
    "detail-type" = ["AWS API Call via CloudTrail"],
    detail = {
      eventName = ["PutObject", "CompleteMultipartUpload"],
      bucketName = ["your-data-bucket-name"]
    }
  })
}

resource "aws_cloudwatch_event_target" "lambda_target" {
  rule      = aws_cloudwatch_event_rule.data_source_event.name
  target_id = "ProcessDataLambda"
  arn       = aws_lambda_function.process_data_lambda.arn
}

resource "aws_lambda_permission" "allow_cloudwatch" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.process_data_lambda.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.data_source_event.arn
}
